"Name"     = 'Enter the name of the grammar'
"Author"   = 'Enter your name'
"Version"  = 'The version of the grammar and/or language'
"About"    = 'A short description of the grammar'
           
"Case Sensitive" = True
"Start Symbol" = <Start>

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{WS}           = {Whitespace} - {CR} - {LF}
{String Chars} = {Printable} + {HT} - ["\]

! -------------------------------------------------
! Terminals
! -------------------------------------------------

! The following defines the Whitespace terminal using the {WS}
! set - which excludes the carriage return and line feed 
! characters

Whitespace    = {WS}+
NewLine       = {CR}{LF} | {CR} | {LF}
              
{Id Head}        = {Letter} + [_]
{Id Tail}        = {Id Head} + {Digit}
Identifier    = {Id Head}{Id Tail}*
              
DecimalLiteral = {Digit}+              
RealLiteral = {Digit}+'.'{Digit}+
StringLiteral = '"' ( {String Chars} | '\' {Printable} )* '"'
              

! ----------------------------------------------------------------- Comments

Comment Line = '//'
Comment Start = '/*'
Comment End = '*/'


! -------------------------------------------------
! Rules
! -------------------------------------------------

! The following rule defines a series of newline tokens.
! Use this rule rather than the newline terminal.

<nl>     ::= NewLine <nl>          !One or more
          |  NewLine

<nl Opt> ::= NewLine <nl Opt>      !Zero or more
          |  <>

! <nl opt> removes blank lines before first statement

<Start>   ::= <nl opt> <Program> <Start> <nl opt>
           

<Program> ::= <Var Decl>
           | <Expression>
           | <Struct Decl>
           | <Read Statement>
           | <Print Statement>
           | <Decl>
           | <VariableUsage>
           | <VariableScope>
           | <nl opt>
           
          

! ===================================================================
! Types
! ===================================================================

<Type> ::= boolean 
        | <Scalar>
        | string
        
<Scalar> ::= int
          | real
          
<Literal> ::= true
            | false
            | DecimalLiteral
            | RealLiteral
            | StringLiteral
            
<Primary> ::= Identifier
           | <Literal>
          
! ===================================================================
! Variable Declaration
! ===================================================================

<Var Decl>  ::= var '{' <TypedVariable> '}'
             |  var '{' <nl opt> <TypedVariable> '}'
             |  var '{' <nl opt> <TypedVariable> <nl opt> '}'
             |  var '{' <TypedVariable> <nl opt> '}'
             | const '{' <TypedConst> '}'
             | const '{' <nl opt> <TypedConst> '}'
             | const '{' <nl opt> <TypedConst> <nl opt>  '}'
             | const '{' <TypedConst> <nl opt> '}'
             
             
<TypedVariable> ::= <Type> <Variables> ';'
                 |  <TypedVariable> <Type> <Variables> ';'
                 |  <TypedVariable> <nl opt> <Type> <Variables> ';'


<Variables> ::= <VariableDeclarator>
              |  <Variables> ',' <VariableDeclarator> 
              |  <Variables> ',' <nl opt> <VariableDeclarator>

               
<VariableDeclarator> ::= Identifier
                      | Identifier '=' <VariableInit>
                      | Identifier '=' Identifier '(' <Args> ')'
                      | Identifier '=' <StructUsage>
                      | <ArrayUsage> '=' '{' <Args> '}'
                      | <ArrayUsage> '=' '{' <Args> '}'
                      | <ArrayUsage>
                      
                          
<VariableInit> ::= <Expression>
                

<TypedConst> ::= <Type> <Constants> ';'
              | <TypedConst> <Type> <Constants> ';'
              | <TypedConst> <nl opt> <Type> <Constants> ';'
              

<Constants> ::= <ConstDeclarator>
             | <Constants> ',' <ConstDeclarator>
             | <Constants> ',' <nl opt> <ConstDeclarator>
                

<ConstDeclarator> ::= Identifier '=' <Literal>

                   
<ArrayUsage> ::= Identifier '[' <Primary> ']'
              | Identifier '[' <Primary> ']' '[' <Primary> ']'


<StructUsage> ::= Identifier '.' Identifier


<VariableUsage> ::= <VariableDeclarator> ';'
                 | <StructUsage> ';'
                 | <StructUsage> '=' <VariableInit> ';'
                 | <StructUsage> '=' Identifier '(' <Args> ')' ';'
                 | <StructUsage> '=' <StructUsage> ';'
                 | <StructUsage> '=' <ArrayUsage> ';'
                 | <ArrayUsage> ';'
                 | <ArrayUsage> '=' <Primary> ';'
                 | <ArrayUsage> '=' <StructUsage> ';'
                 | <ArrayUsage> '=' <ArrayUsage> ';'

      
<VariableScope> ::= <VariableScopeType> '.' <VariableUsage>
                 | <VariableScopeType> '.' Identifier '=' Identifier ';'
                 | <VariableScopeType> '.' Identifier '=' <StructUsage> ';'
                 | <VariableScopeType> '.' Identifier '=' <ArrayUsage> ';'
                 | <VariableScopeType> '.'  Identifier '=' <VariableScopeType> '.' Identifier ';'
                 | <VariableScopeType> '.'  <ArrayUsage> '=' <VariableScopeType> '.' Identifier ';'
                 | <VariableScopeType> '.'  Identifier '=' <VariableScopeType> '.' <ArrayUsage> ';'


<VariableScopeType> ::= 'local'
                     | 'global'


<Mod> ::= var
       | const         

! ===================================================================
! Struct  Declaration
! ===================================================================

<Struct Decl> ::= typedef struct '{' <nl opt> <Struct Def> '}' Identifier ';' | typedef struct extends Identifier '{' <nl opt> <Struct Def> '}' Identifier ';'

<Struct Def> ::= <Var Decl> <nl opt> <Struct Def>
               | <Var Decl> <nl opt>
        
! ===================================================================
! Function  Declaration
! ===================================================================

<Func Decl>  ::= <Func ID> '(' <Params>  ')' 
               | <Func ID> '(' <Id List> ')'
               | <Func ID> '(' ')'


<Params>     ::= <Param> ',' <Params>
               | <Param>
               
<Param>      ::= <Type> Identifier
               
<Types>      ::= <Type>  ',' <Types>
               | <Type> 
   
<Id List>    ::= Identifier ',' <Id List>
               | Identifier

<Func ID>    ::= <Type> Identifier 
                     

! ===================================================================
! Expression  Declaration
! ===================================================================

<Expression> ::= <OrExpression>
               
<OrExpression> ::= <OrExpression> '||' <AndExpression>
                | <AndExpression>

<AndExpression> ::= <AndExpression> '&&' <EqualityExpression>
                 | <EqualityExpression>
                 
<EqualityExpression> ::= <EqualityExpression> '==' <CompareExpression>
                       | <EqualityExpression> '!=' <CompareExpression>
                       | <CompareExpression>
                       
<CompareExpression> ::= <CompareExpression> '<'  <AddExpression>
                     | <CompareExpression> '>'  <AddExpression>
                     | <CompareExpression> '<=' <AddExpression>
                     | <CompareExpression> '>=' <AddExpression>
                     | <AddExpression>
        
<AddExpression> ::= <AddExpression> '+' <MultiplicationExpression>
                 | <AddExpression> '-' <MultiplicationExpression>
                 | <MultiplicationExpression>

<MultiplicationExpression> ::= <MultiplicationExpression> '*' <UnaryExpression> 
                            | <MultiplicationExpression> '/' <UnaryExpression> 
                            | <UnaryExpression>
        
<UnaryExpression> ::= '!' <UnaryExpression>
                   | <ObjectExpression>
                  
<ObjectExpression> ::= <MethodExpression>
                   ! | <PrimaryArrayCreationExpression>
                    
                       
! <PrimaryArrayCreationExpression> ::= <>!Empty
                      
            
<MethodExpression> ::= <PrimaryExpression>
                    
<PrimaryExpression> ::= <Primary>
                     | '(' <Expression> ')'
                     

           
                                     
!<Expression> ::= <expressionsLogics> 
!          |
          
!<expressionsLogics> ::= <expressionLogic><operetorsLogics><expressionsLogicsAux> 
!                     | <operetorsLogics><expressionLogic>
!                     | <expressionLogic>
                     
!<expressionsLogicsAux> ::= <expressionsLogics>                 
!<operetorsLogics> ::= '&&' | '||'
!<expressionLogic> ::= '!'<expressionsBoolean>
!                  | <expressionsBoolean> 
                   
!<expressionsBoolean> ::= 'true'|'false'|Identifier   

! ===================================================================
! While Loop
! ===================================================================

<While> ::= 'while' '(' <Expression> ')' <Statement>
         
! ===================================================================
! If-Else
! ===================================================================

<if> ::= | if '(' <Expression> ')' <Statement>
         | if '(' <Expression> ')' <Statement> else <Statement>  

! ===================================================================
! Read
! ===================================================================

!falta aceitar struct
<Read Statement>   ::= 'read' '(' <Exp_read> ')'';'
                   
<Exp_read> ::= Identifier <Exp_read1>
<Exp_read1> ::= <Array Verification> <More Readings>            
<More Readings> ::= ',' <Exp_read> | <>
                 
<Array Verification> ::= '['<Array Index>']'<DoubleArray> | <>
<DoubleArray> ::= '['<Array Index>']' | <>
<Array Index> ::= DecimalLiteral | Identifier 
 

! ===================================================================
! Print
! ===================================================================

!falta aceitar struct
<Print Statement> ::= 'print' '(' <Exp_print> ')'';' 
<Exp_print> ::= Identifier <Expre> | StringLiteral <More Expressions>
<Expre> ::= <Array Verification> <More Expressions>          
<More Expressions> ::= ',' <Exp_print> | <>
        

!* ================================================== *!
!*         Declaração de Functions e Procedures       *!
!* ================================================== *! 

!<Decls> ::= <Decl> <Decls> | <>

<Decl> ::= <Function Decl> | <Procedure Decl> | <Call Func>
 
<Function Decl> ::= 'function' <Type> Identifier '(' <Params> ')' <Block Func>
                 
<Procedure Decl> ::= 'procedure' Identifier '(' <Params> ')' <Block Proc>
                  
<Params>     ::= <Param> | <Param> ',' <Params> | <>
               
<Param> ::= <Type> Identifier
         
<Block Func> ::= '{' <nl Opt> <Body List> '}' <nl Opt> 

<Block Proc> ::= '{' <nl Opt> <Body List> '}' <nl Opt>

!* ================================================== *!
!*       Corpo e chamada de Function/Procedures       *!
!* ================================================== *! 
         
<Body List> ::=  <Body> <Body List> | <>

<Body> ::= Identifier 
         | <Return>
         | <Call Func>
         | <Var Decl>
         !| <Expression>
         | <Read Statement>
         | <Print Statement>                   
          
<Return> ::= 'return' ';' <nl Opt>
           | 'return' Identifier ';' <nl Opt>
           | 'return' 'true' ';' <nl Opt>
           | 'return' 'false' ';' <nl Opt>
           | 'return' <Call Func> ';' <nl Opt>
           | 'return' DecimalLiteral ';' <nl Opt>
           | 'return' RealLiteral ';' <nl Opt>
           | 'return' StringLiteral ';' <nl Opt>
           !| 'return' <Expression> ';' <nl Opt>

<Call Func> ::= Identifier '(' <Args> ')' ';' <nl Opt>

<Args> ::= <Arg> | <Arg> ',' <Args> | <>
             
<Arg> ::= Identifier 
        | 'true'
        | 'false'
        | <Call Func>
        | DecimalLiteral
        | RealLiteral
       
! ===================================================================
! Statement
! =================================================================== 

!Não está finalizado. Adicionnar quebra de linha e verificar se esqueci de algum caso
<Statement> ::= '{' <StatementsList> '}' | '{' '}' | <SimpleStatament>
             
<StatementsList> ::=  <Statement><StatementsList> 
                     |
             
<StatementList> ::=  <SimpleStatament>
                | <if>
                | <while> 
 !               | <Func Decl>

 
<SimpleStatament> ::=  <Read Statement>
                  | <Print Statement> 
                  | <Expression> 
                  | <Var Decl> 
                  | <Call Func>
                  | <Variables>
        
!* ================================================== *!

                          


