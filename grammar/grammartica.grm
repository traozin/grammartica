"Name"     = 'Enter the name of the grammar'
"Author"   = 'Enter your name'
"Version"  = 'The version of the grammar and/or language'
"About"    = 'A short description of the grammar'
           
"Case Sensitive" = True
"Start Symbol" = <Start>

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{WS}           = {Whitespace} - {CR} - {LF}
{String Chars} = {Printable} + {HT} - ["\]

! -------------------------------------------------
! Terminals
! -------------------------------------------------

! The following defines the Whitespace terminal using the {WS}
! set - which excludes the carriage return and line feed 
! characters

Whitespace    = {WS}+
NewLine       = {CR}{LF} | {CR} | {LF}
              
{Id Head}        = {Letter} + [_]
{Id Tail}        = {Id Head} + {Digit}
Identifier    = {Id Head}{Id Tail}*
              
DecimalLiteral = {Digit}+              
RealLiteral = {Digit}+'.'{Digit}+
StringLiteral = '"' ( {String Chars} | '\' {Printable} )* '"'

! -------------------------------------------------
! Rules
! -------------------------------------------------

! The following rule defines a series of newline tokens.
! Use this rule rather than the newline terminal.

<nl>     ::= NewLine <nl>          !One or more
          |  NewLine

<nl Opt> ::= NewLine <nl Opt>      !Zero or more
          |  <>

! <nl opt> removes blank lines before first statement

<Start>   ::= <nl opt> <Program> <Start>
           | <>

<Program> ::= <Var Decl>
!           | <Func Decl>
           


! ===================================================================
! Types
! ===================================================================

<Type> ::= boolean 
        | <Scalar>
        | string
        
<Scalar> ::= int
          | real
          
! ===================================================================
! Variable Declaration
! ===================================================================

<Var Decl>  ::= <Mod> '{' <TypedVariable> '}'
             |  <Mod> '{' <nl opt> <TypedVariable> '}'
             |  <Mod> '{' <nl opt> <TypedVariable> <nl opt> '}'
             |  <Mod> '{' <TypedVariable> <nl opt> '}'
             
             
<TypedVariable> ::= <Type> <Variables> ';'
                 |  <Type> <Variables> ';' <nl opt>
                 |  <TypedVariable> <Type> <Variables> ';'
                 |  <TypedVariable> <Type> <Variables> ';' <nl opt>


<Variables> ::= <VariableDeclarator>
              |  <Variables> ',' <VariableDeclarator> 
              |  <Variables> ',' <nl opt> <VariableDeclarator>

               
<VariableDeclarator> ::= Identifier
                      | Identifier '=' <VariableInit>
              
        
<VariableInit> ::= <Expression>
               

<Mod> ::= var
       | const         

              
! ===================================================================
! Function  Declaration
! ===================================================================

<Func Decl>  ::= <Func ID> '(' <Params>  ')' 
               | <Func ID> '(' <Id List> ')'
               | <Func ID> '(' ')'


<Params>     ::= <Param> ',' <Params>
               | <Param>
               
<Param>      ::= <Type> Identifier
               
<Types>      ::= <Type>  ',' <Types>
               | <Type> 
   
<Id List>    ::= Identifier ',' <Id List>
               | Identifier

<Func ID>    ::= <Type> Identifier 
                     

! ===================================================================
! Expression  Declaration
! ===================================================================

<Expression> ::= <OrExpression>
               
<OrExpression> ::= <OrExpression> '||' <AndExpression>
                | <AndExpression>

<AndExpression> ::= <AndExpression> '&&' <EqualityExpression>
                 | <EqualityExpression>
                 
<EqualityExpression> ::= <EqualityExpression> '==' <CompareExpression>
                       | <EqualityExpression> '!=' <CompareExpression>
                       | <CompareExpression>
                       
<CompareExpression> ::= <CompareExpression> '<'  <AddExpression>
                     | <CompareExpression> '>'  <AddExpression>
                     | <CompareExpression> '<=' <AddExpression>
                     | <CompareExpression> '>=' <AddExpression>
                     | <AddExpression>
        
<AddExpression> ::= <AddExpression> '+' <MultiplicationExpression>
                 | <AddExpression> '-' <MultiplicationExpression>
                 | <MultiplicationExpression>

<MultiplicationExpression> ::= <MultiplicationExpression> '*' <UnaryExpression> 
                            | <MultiplicationExpression> '/' <UnaryExpression> 
                            | <UnaryExpression>
        
<UnaryExpression> ::= '!' <UnaryExpression>
                   | <ObjectExpression>
                  
<ObjectExpression> ::= <MethodExpression>
                   ! | <PrimaryArrayCreationExpression>
                    
                       
! <PrimaryArrayCreationExpression> ::= <>!Empty
                      
            
<MethodExpression> ::= <PrimaryExpression>
                    
<PrimaryExpression> ::= <Primary>
                     | '(' <Expression> ')'
                     
<Primary> ::= <ValidIdentifier>
           | <Literal>
           

<ValidIdentifier> ::= Identifier
                   | <Type> 
                   
!<Expression> ::= <expressionsLogics> 
!          |
          
!<expressionsLogics> ::= <expressionLogic><operetorsLogics><expressionsLogicsAux> 
!                     | <operetorsLogics><expressionLogic>
!                     | <expressionLogic>
                     
!<expressionsLogicsAux> ::= <expressionsLogics>                 
!<operetorsLogics> ::= '&&' | '||'
!<expressionLogic> ::= '!'<expressionsBoolean>
!                  | <expressionsBoolean> 
                   
!<expressionsBoolean> ::= 'true'|'false'|Identifier   
                    
! ===================================================================
! Literals
! ===================================================================

<Literal> ::= true
            | false
            | DecimalLiteral
            | RealLiteral
            | StringLiteral


!Add more values to the rule below - as needed

<Value>       ::= Identifier            
               |  '(' <Expression> ')'
